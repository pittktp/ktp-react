{"ast":null,"code":"import ApiService from './Api';\nconst BASE_URL = process.env.REACT_APP_API || 'http://localhost:3030/'; // Instantiate a new API service\n\nlet client = new ApiService({\n  baseURL: BASE_URL\n});\nconst Api = {}; // Set default headers, including any token found in localStorage\n// This is important because when an API call is made during page load,\n// Redux will not have loaded the token value yet, causing all API calls\n// during page load to fail\n\nApi.setToken = token => {\n  let HEADERS = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Authorization': token\n  };\n  client = new ApiService({\n    baseURL: BASE_URL,\n    headers: HEADERS\n  });\n}; // Declaring specific methods for our KTP server makes it easy to\n// understand what we're trying to do, cuts down on unnecessary\n// boilerplate code, as well as allows us to edit API calls in one place\n// and have it update across the application.\n// AUTH\n\n\nApi.validate = () => client.get('/auth/validate');\n\nApi.login = payload => client.post('/auth/login', payload);\n\nApi.register = payload => client.post('/auth/register', payload); // MEMBER\n\n\nApi.getMembers = () => client.get('/members');\n\nApi.getMember = emailId => client.get(`/members/email/${emailId}`);\n\nApi.loadMember = id => client.get(`/members/${id}`);\n\nApi.sendAttendence = payload => client.patch('/members/attendence', payload);\n\nApi.updateMember = (id, payload) => client.patch(`/members/${id}`, payload);\n\nApi.deleteMember = id => client.delete(`/members/${id}`);\n\nApi.zeroDB = () => client.patch('/members/clear');\n\nApi.uploadPicture = (id, payload) => client.post(`/members/${id}/image/upload`, payload);\n\nApi.deletePicture = id => client.delete(`/members/${id}/image/delete`); // REQUEST\n\n\nApi.getRequests = () => client.get('/requests');\n\nApi.createRequest = payload => client.post('/requests', payload);\n\nApi.acceptRequest = (id, payload) => client.patch(`/requests/${id}`, payload);\n\nApi.denyRequest = id => client.delete(`/requests/${id}`);\n\nexport default Api;","map":{"version":3,"sources":["E:/Webpage/KTP/ktp-react/src/services/KTPApi.js"],"names":["ApiService","BASE_URL","process","env","REACT_APP_API","client","baseURL","Api","setToken","token","HEADERS","headers","validate","get","login","payload","post","register","getMembers","getMember","emailId","loadMember","id","sendAttendence","patch","updateMember","deleteMember","delete","zeroDB","uploadPicture","deletePicture","getRequests","createRequest","acceptRequest","denyRequest"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,OAAvB;AAEA,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,aAAZ,IAA6B,wBAA9C,C,CAEA;;AACA,IAAIC,MAAM,GAAG,IAAIL,UAAJ,CAAe;AAAEM,EAAAA,OAAO,EAAEL;AAAX,CAAf,CAAb;AAEA,MAAMM,GAAG,GAAG,EAAZ,C,CAEA;AACA;AACA;AACA;;AACAA,GAAG,CAACC,QAAJ,GAAgBC,KAAD,IAAW;AACxB,MAAIC,OAAO,GAAG;AACZ,oBAAgB,kBADJ;AAEZ,cAAU,kBAFE;AAGZ,qBAAiBD;AAHL,GAAd;AAMAJ,EAAAA,MAAM,GAAG,IAAIL,UAAJ,CAAe;AAAEM,IAAAA,OAAO,EAAEL,QAAX;AAAqBU,IAAAA,OAAO,EAAED;AAA9B,GAAf,CAAT;AACD,CARD,C,CAUA;AACA;AACA;AACA;AAEA;;;AACAH,GAAG,CAACK,QAAJ,GAAe,MAAMP,MAAM,CAACQ,GAAP,CAAW,gBAAX,CAArB;;AACAN,GAAG,CAACO,KAAJ,GAAYC,OAAO,IAAIV,MAAM,CAACW,IAAP,CAAY,aAAZ,EAA2BD,OAA3B,CAAvB;;AACAR,GAAG,CAACU,QAAJ,GAAeF,OAAO,IAAIV,MAAM,CAACW,IAAP,CAAY,gBAAZ,EAA8BD,OAA9B,CAA1B,C,CAEA;;;AACAR,GAAG,CAACW,UAAJ,GAAiB,MAAMb,MAAM,CAACQ,GAAP,CAAW,UAAX,CAAvB;;AACAN,GAAG,CAACY,SAAJ,GAAgBC,OAAO,IAAIf,MAAM,CAACQ,GAAP,CAAY,kBAAiBO,OAAQ,EAArC,CAA3B;;AACAb,GAAG,CAACc,UAAJ,GAAiBC,EAAE,IAAIjB,MAAM,CAACQ,GAAP,CAAY,YAAWS,EAAG,EAA1B,CAAvB;;AACAf,GAAG,CAACgB,cAAJ,GAAqBR,OAAO,IAAIV,MAAM,CAACmB,KAAP,CAAa,qBAAb,EAAoCT,OAApC,CAAhC;;AACAR,GAAG,CAACkB,YAAJ,GAAmB,CAACH,EAAD,EAAKP,OAAL,KAAiBV,MAAM,CAACmB,KAAP,CAAc,YAAWF,EAAG,EAA5B,EAA+BP,OAA/B,CAApC;;AACAR,GAAG,CAACmB,YAAJ,GAAmBJ,EAAE,IAAIjB,MAAM,CAACsB,MAAP,CAAe,YAAWL,EAAG,EAA7B,CAAzB;;AACAf,GAAG,CAACqB,MAAJ,GAAa,MAAMvB,MAAM,CAACmB,KAAP,CAAa,gBAAb,CAAnB;;AACAjB,GAAG,CAACsB,aAAJ,GAAoB,CAACP,EAAD,EAAKP,OAAL,KAAiBV,MAAM,CAACW,IAAP,CAAa,YAAWM,EAAG,eAA3B,EAA2CP,OAA3C,CAArC;;AACAR,GAAG,CAACuB,aAAJ,GAAoBR,EAAE,IAAIjB,MAAM,CAACsB,MAAP,CAAe,YAAWL,EAAG,eAA7B,CAA1B,C,CAEA;;;AACAf,GAAG,CAACwB,WAAJ,GAAkB,MAAM1B,MAAM,CAACQ,GAAP,CAAW,WAAX,CAAxB;;AACAN,GAAG,CAACyB,aAAJ,GAAoBjB,OAAO,IAAIV,MAAM,CAACW,IAAP,CAAY,WAAZ,EAAyBD,OAAzB,CAA/B;;AACAR,GAAG,CAAC0B,aAAJ,GAAoB,CAACX,EAAD,EAAKP,OAAL,KAAiBV,MAAM,CAACmB,KAAP,CAAc,aAAYF,EAAG,EAA7B,EAAgCP,OAAhC,CAArC;;AACAR,GAAG,CAAC2B,WAAJ,GAAkBZ,EAAE,IAAIjB,MAAM,CAACsB,MAAP,CAAe,aAAYL,EAAG,EAA9B,CAAxB;;AAEA,eAAef,GAAf","sourcesContent":["import ApiService from './Api';\r\n\r\nconst BASE_URL = process.env.REACT_APP_API || 'http://localhost:3030/';\r\n\r\n// Instantiate a new API service\r\nlet client = new ApiService({ baseURL: BASE_URL });\r\n\r\nconst Api = {};\r\n\r\n// Set default headers, including any token found in localStorage\r\n// This is important because when an API call is made during page load,\r\n// Redux will not have loaded the token value yet, causing all API calls\r\n// during page load to fail\r\nApi.setToken = (token) => {\r\n  let HEADERS = {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json',\r\n    'Authorization': token\r\n  };\r\n\r\n  client = new ApiService({ baseURL: BASE_URL, headers: HEADERS });\r\n}\r\n\r\n// Declaring specific methods for our KTP server makes it easy to\r\n// understand what we're trying to do, cuts down on unnecessary\r\n// boilerplate code, as well as allows us to edit API calls in one place\r\n// and have it update across the application.\r\n\r\n// AUTH\r\nApi.validate = () => client.get('/auth/validate');\r\nApi.login = payload => client.post('/auth/login', payload);\r\nApi.register = payload => client.post('/auth/register', payload);\r\n\r\n// MEMBER\r\nApi.getMembers = () => client.get('/members');\r\nApi.getMember = emailId => client.get(`/members/email/${emailId}`);\r\nApi.loadMember = id => client.get(`/members/${id}`);\r\nApi.sendAttendence = payload => client.patch('/members/attendence', payload);\r\nApi.updateMember = (id, payload) => client.patch(`/members/${id}`, payload);\r\nApi.deleteMember = id => client.delete(`/members/${id}`);\r\nApi.zeroDB = () => client.patch('/members/clear');\r\nApi.uploadPicture = (id, payload) => client.post(`/members/${id}/image/upload`, payload);\r\nApi.deletePicture = id => client.delete(`/members/${id}/image/delete`);\r\n\r\n// REQUEST\r\nApi.getRequests = () => client.get('/requests');\r\nApi.createRequest = payload => client.post('/requests', payload);\r\nApi.acceptRequest = (id, payload) => client.patch(`/requests/${id}`, payload);\r\nApi.denyRequest = id => client.delete(`/requests/${id}`);\r\n\r\nexport default Api;\r\n"]},"metadata":{},"sourceType":"module"}
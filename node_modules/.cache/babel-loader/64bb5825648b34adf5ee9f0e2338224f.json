{"ast":null,"code":"// ACTION TYPES\nexport const types = {\n  TOAST_SUCCESS: 'TOAST_SUCCESS',\n  TOAST_ERROR: 'TOAST_ERROR',\n  TOAST_INFO: 'TOAST_INFO',\n  TOAST_WARNING: 'TOAST_WARNING',\n  TOAST_CLEAR: 'TOAST_CLEAR'\n}; // Each color corresponds to an action type\n// except clear which doesn't display anything\n\nexport const colors = {\n  success: '#28a745',\n  error: '#dc3545',\n  info: '#17a2b8',\n  warning: '#ffc107'\n}; // Helper function to easily convert params into an object\n\nconst action = (type, payload) => ({\n  type,\n  payload\n}); // Helper function to determine the type and color based on a string\n\n\nconst getTypeAndColor = toastType => {\n  switch (toastType) {\n    case 'success':\n      return {\n        type: types.TOAST_SUCCESS,\n        color: colors.success\n      };\n\n    case 'error':\n      return {\n        type: types.TOAST_ERROR,\n        color: colors.error\n      };\n\n    case 'info':\n      return {\n        type: types.TOAST_INFO,\n        color: colors.info\n      };\n\n    case 'warning':\n      return {\n        type: types.TOAST_WARNING,\n        color: colors.warning\n      };\n\n    case 'clear':\n    default:\n      return {\n        type: types.TOAST_CLEAR,\n        color: 'transparent'\n      };\n  }\n}; // ACTION CREATORS\n// These are the functions we call in our other files\n// to actually make something happen/display\n// NOTE: These are synchronous Action Creators because we are not\n// making any API or DB calls which are always asynchronous.\n\n\nconst toastActions = {\n  show: (toastType, msg) => {\n    return dispatch => {\n      let {\n        type,\n        color\n      } = getTypeAndColor(toastType);\n      dispatch(action(type, {\n        visible: true,\n        color,\n        msg\n      }));\n    };\n  },\n  clear: () => {\n    return dispatch => {\n      dispatch(action(types.TOAST_CLEAR, {\n        visible: false,\n        color: 'transparent',\n        msg: ''\n      }));\n    };\n  }\n};\nexport default toastActions;","map":{"version":3,"sources":["E:/Webpage/KTP/ktp-react/src/redux/toast/actions.js"],"names":["types","TOAST_SUCCESS","TOAST_ERROR","TOAST_INFO","TOAST_WARNING","TOAST_CLEAR","colors","success","error","info","warning","action","type","payload","getTypeAndColor","toastType","color","toastActions","show","msg","dispatch","visible","clear"],"mappings":"AAAA;AACA,OAAO,MAAMA,KAAK,GAAG;AACnBC,EAAAA,aAAa,EAAE,eADI;AAEnBC,EAAAA,WAAW,EAAE,aAFM;AAGnBC,EAAAA,UAAU,EAAE,YAHO;AAInBC,EAAAA,aAAa,EAAE,eAJI;AAKnBC,EAAAA,WAAW,EAAE;AALM,CAAd,C,CAQP;AACA;;AACA,OAAO,MAAMC,MAAM,GAAG;AACpBC,EAAAA,OAAO,EAAE,SADW;AAEpBC,EAAAA,KAAK,EAAE,SAFa;AAGpBC,EAAAA,IAAI,EAAE,SAHc;AAIpBC,EAAAA,OAAO,EAAE;AAJW,CAAf,C,CAOP;;AACA,MAAMC,MAAM,GAAG,CAACC,IAAD,EAAOC,OAAP,MAAoB;AAAED,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAApB,CAAf,C,CAEA;;;AACA,MAAMC,eAAe,GAAGC,SAAS,IAAI;AACnC,UAAQA,SAAR;AACE,SAAK,SAAL;AACE,aAAO;AAAEH,QAAAA,IAAI,EAAEZ,KAAK,CAACC,aAAd;AAA6Be,QAAAA,KAAK,EAAEV,MAAM,CAACC;AAA3C,OAAP;;AACF,SAAK,OAAL;AACE,aAAO;AAAEK,QAAAA,IAAI,EAAEZ,KAAK,CAACE,WAAd;AAA2Bc,QAAAA,KAAK,EAAEV,MAAM,CAACE;AAAzC,OAAP;;AACF,SAAK,MAAL;AACE,aAAO;AAAEI,QAAAA,IAAI,EAAEZ,KAAK,CAACG,UAAd;AAA0Ba,QAAAA,KAAK,EAAEV,MAAM,CAACG;AAAxC,OAAP;;AACF,SAAK,SAAL;AACE,aAAO;AAAEG,QAAAA,IAAI,EAAEZ,KAAK,CAACI,aAAd;AAA6BY,QAAAA,KAAK,EAAEV,MAAM,CAACI;AAA3C,OAAP;;AACF,SAAK,OAAL;AACA;AACE,aAAO;AAAEE,QAAAA,IAAI,EAAEZ,KAAK,CAACK,WAAd;AAA2BW,QAAAA,KAAK,EAAE;AAAlC,OAAP;AAXJ;AAaD,CAdD,C,CAgBA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,CAACH,SAAD,EAAYI,GAAZ,KAAoB;AACxB,WAAOC,QAAQ,IAAI;AACjB,UAAI;AAAER,QAAAA,IAAF;AAAQI,QAAAA;AAAR,UAAkBF,eAAe,CAACC,SAAD,CAArC;AACAK,MAAAA,QAAQ,CAACT,MAAM,CAACC,IAAD,EAAO;AAAES,QAAAA,OAAO,EAAE,IAAX;AAAiBL,QAAAA,KAAjB;AAAwBG,QAAAA;AAAxB,OAAP,CAAP,CAAR;AACD,KAHD;AAID,GANkB;AAOnBG,EAAAA,KAAK,EAAE,MAAM;AACX,WAAOF,QAAQ,IAAI;AACjBA,MAAAA,QAAQ,CAACT,MAAM,CAACX,KAAK,CAACK,WAAP,EAAoB;AAAEgB,QAAAA,OAAO,EAAE,KAAX;AAAkBL,QAAAA,KAAK,EAAE,aAAzB;AAAwCG,QAAAA,GAAG,EAAE;AAA7C,OAApB,CAAP,CAAR;AACD,KAFD;AAGD;AAXkB,CAArB;AAcA,eAAeF,YAAf","sourcesContent":["// ACTION TYPES\r\nexport const types = {\r\n  TOAST_SUCCESS: 'TOAST_SUCCESS',\r\n  TOAST_ERROR: 'TOAST_ERROR',\r\n  TOAST_INFO: 'TOAST_INFO',\r\n  TOAST_WARNING: 'TOAST_WARNING',\r\n  TOAST_CLEAR: 'TOAST_CLEAR'\r\n};\r\n\r\n// Each color corresponds to an action type\r\n// except clear which doesn't display anything\r\nexport const colors = {\r\n  success: '#28a745',\r\n  error: '#dc3545',\r\n  info: '#17a2b8',\r\n  warning: '#ffc107',\r\n}\r\n\r\n// Helper function to easily convert params into an object\r\nconst action = (type, payload) => ({ type, payload });\r\n\r\n// Helper function to determine the type and color based on a string\r\nconst getTypeAndColor = toastType => {\r\n  switch (toastType) {\r\n    case 'success':\r\n      return { type: types.TOAST_SUCCESS, color: colors.success };\r\n    case 'error':\r\n      return { type: types.TOAST_ERROR, color: colors.error };\r\n    case 'info':\r\n      return { type: types.TOAST_INFO, color: colors.info };\r\n    case 'warning':\r\n      return { type: types.TOAST_WARNING, color: colors.warning };\r\n    case 'clear':\r\n    default:\r\n      return { type: types.TOAST_CLEAR, color: 'transparent' };\r\n  }\r\n};\r\n\r\n// ACTION CREATORS\r\n// These are the functions we call in our other files\r\n// to actually make something happen/display\r\n// NOTE: These are synchronous Action Creators because we are not\r\n// making any API or DB calls which are always asynchronous.\r\nconst toastActions = {\r\n  show: (toastType, msg) => {\r\n    return dispatch => {\r\n      let { type, color } = getTypeAndColor(toastType);\r\n      dispatch(action(type, { visible: true, color, msg }));\r\n    }\r\n  },\r\n  clear: () => {\r\n    return dispatch => {\r\n      dispatch(action(types.TOAST_CLEAR, { visible: false, color: 'transparent', msg: '' }));\r\n    }\r\n  }\r\n};\r\n\r\nexport default toastActions;"]},"metadata":{},"sourceType":"module"}
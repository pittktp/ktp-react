{"ast":null,"code":"import axios from 'axios'; // Setting Default API values\n\nconst API_ROOT = process.env.REACT_APP_API || 'http://localhost:3030/';\nconst TIMEOUT = 20000;\nconst HEADERS = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n}; // Declaring generic API service\n\nclass ApiService {\n  constructor({\n    baseURL = API_ROOT,\n    timeout = TIMEOUT,\n    headers = HEADERS\n  }) {\n    const client = axios.create({\n      baseURL,\n      timeout,\n      headers\n    });\n    client.interceptors.response.use(this.handleSuccess, this.handleError);\n    this.client = client;\n  } // The two below handle functions makes it easier to interact with our\n  // API response, especially in the case of an error\n\n\n  handleSuccess(response) {\n    return response;\n  }\n\n  handleError(error) {\n    return Promise.reject(error);\n  } // NOTE: Payload refers to the request body\n  // GET DATA\n\n\n  get(path) {\n    return this.client.get(path).then(response => response.data);\n  } // CREATE DATA OR FILE UPLOAD\n\n\n  post(path, payload) {\n    return this.client.post(path, payload).then(response => response.data);\n  } // REPLACE EXISTING DATA OR CREATE IF NOT FOUND\n\n\n  put(path, payload) {\n    return this.client.put(path, payload).then(response => response.data);\n  } // UPDATE EXISTING DATA\n\n\n  patch(path, payload) {\n    return this.client.patch(path, payload).then(response => response.data);\n  } // DELETE EXISTING DATA\n\n\n  delete(path) {\n    return this.client.delete(path).then(response => response.data);\n  }\n\n}\n\nexport default ApiService;","map":{"version":3,"sources":["E:/Webpage/KTP/ktp-react/src/services/Api.js"],"names":["axios","API_ROOT","process","env","REACT_APP_API","TIMEOUT","HEADERS","ApiService","constructor","baseURL","timeout","headers","client","create","interceptors","response","use","handleSuccess","handleError","error","Promise","reject","get","path","then","data","post","payload","put","patch","delete"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,aAAZ,IAA6B,wBAA9C;AACA,MAAMC,OAAO,GAAG,KAAhB;AACA,MAAMC,OAAO,GAAG;AACd,kBAAgB,kBADF;AAEd,YAAU;AAFI,CAAhB,C,CAKA;;AACA,MAAMC,UAAN,CAAiB;AACfC,EAAAA,WAAW,CAAC;AAAEC,IAAAA,OAAO,GAAGR,QAAZ;AAAsBS,IAAAA,OAAO,GAAGL,OAAhC;AAAyCM,IAAAA,OAAO,GAAGL;AAAnD,GAAD,EAA+D;AACxE,UAAMM,MAAM,GAAGZ,KAAK,CAACa,MAAN,CAAa;AAAEJ,MAAAA,OAAF;AAAWC,MAAAA,OAAX;AAAoBC,MAAAA;AAApB,KAAb,CAAf;AACAC,IAAAA,MAAM,CAACE,YAAP,CAAoBC,QAApB,CAA6BC,GAA7B,CAAiC,KAAKC,aAAtC,EAAqD,KAAKC,WAA1D;AACA,SAAKN,MAAL,GAAcA,MAAd;AACD,GALc,CAOf;AACA;;;AACAK,EAAAA,aAAa,CAACF,QAAD,EAAW;AACtB,WAAOA,QAAP;AACD;;AAEDG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,WAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,GAfc,CAiBf;AAEA;;;AACAG,EAAAA,GAAG,CAACC,IAAD,EAAO;AACR,WAAO,KAAKX,MAAL,CAAYU,GAAZ,CAAgBC,IAAhB,EAAsBC,IAAtB,CAA2BT,QAAQ,IAAIA,QAAQ,CAACU,IAAhD,CAAP;AACD,GAtBc,CAwBf;;;AACAC,EAAAA,IAAI,CAACH,IAAD,EAAOI,OAAP,EAAgB;AAClB,WAAO,KAAKf,MAAL,CAAYc,IAAZ,CAAiBH,IAAjB,EAAuBI,OAAvB,EAAgCH,IAAhC,CAAqCT,QAAQ,IAAIA,QAAQ,CAACU,IAA1D,CAAP;AACD,GA3Bc,CA6Bf;;;AACAG,EAAAA,GAAG,CAACL,IAAD,EAAOI,OAAP,EAAgB;AACjB,WAAO,KAAKf,MAAL,CAAYgB,GAAZ,CAAgBL,IAAhB,EAAsBI,OAAtB,EAA+BH,IAA/B,CAAoCT,QAAQ,IAAIA,QAAQ,CAACU,IAAzD,CAAP;AACD,GAhCc,CAkCf;;;AACAI,EAAAA,KAAK,CAACN,IAAD,EAAOI,OAAP,EAAgB;AACnB,WAAO,KAAKf,MAAL,CAAYiB,KAAZ,CAAkBN,IAAlB,EAAwBI,OAAxB,EAAiCH,IAAjC,CAAsCT,QAAQ,IAAIA,QAAQ,CAACU,IAA3D,CAAP;AACD,GArCc,CAuCf;;;AACAK,EAAAA,MAAM,CAACP,IAAD,EAAO;AACX,WAAO,KAAKX,MAAL,CAAYkB,MAAZ,CAAmBP,IAAnB,EAAyBC,IAAzB,CAA8BT,QAAQ,IAAIA,QAAQ,CAACU,IAAnD,CAAP;AACD;;AA1Cc;;AA6CjB,eAAelB,UAAf","sourcesContent":["import axios from 'axios';\r\n\r\n// Setting Default API values\r\nconst API_ROOT = process.env.REACT_APP_API || 'http://localhost:3030/';\r\nconst TIMEOUT = 20000;\r\nconst HEADERS = {\r\n  'Content-Type': 'application/json',\r\n  'Accept': 'application/json',\r\n};\r\n\r\n// Declaring generic API service\r\nclass ApiService {\r\n  constructor({ baseURL = API_ROOT, timeout = TIMEOUT, headers = HEADERS }) {\r\n    const client = axios.create({ baseURL, timeout, headers });\r\n    client.interceptors.response.use(this.handleSuccess, this.handleError);\r\n    this.client = client;\r\n  }\r\n\r\n  // The two below handle functions makes it easier to interact with our\r\n  // API response, especially in the case of an error\r\n  handleSuccess(response) {\r\n    return response;\r\n  }\r\n\r\n  handleError(error) {\r\n    return Promise.reject(error);\r\n  }\r\n\r\n  // NOTE: Payload refers to the request body\r\n\r\n  // GET DATA\r\n  get(path) {\r\n    return this.client.get(path).then(response => response.data);\r\n  }\r\n\r\n  // CREATE DATA OR FILE UPLOAD\r\n  post(path, payload) {\r\n    return this.client.post(path, payload).then(response => response.data);\r\n  }\r\n\r\n  // REPLACE EXISTING DATA OR CREATE IF NOT FOUND\r\n  put(path, payload) {\r\n    return this.client.put(path, payload).then(response => response.data);\r\n  }\r\n  \r\n  // UPDATE EXISTING DATA\r\n  patch(path, payload) {\r\n    return this.client.patch(path, payload).then(response => response.data);\r\n  }\r\n\r\n  // DELETE EXISTING DATA\r\n  delete(path) {\r\n    return this.client.delete(path).then(response => response.data);\r\n  }\r\n}\r\n\r\nexport default ApiService;"]},"metadata":{},"sourceType":"module"}